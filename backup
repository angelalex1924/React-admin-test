
  
  //1 API
  const Login = ({ onLogin }) => {
    const [errorOccurred, setErrorOccurred] = useState(false);
    const [wrongCredentials, setWrongCredentials] = useState(false);
    const navigate = useNavigate();
   
    const clientid = "934283614989-l02fh32jakkeuupin2nmmmtlrdvg2uu7.apps.googleusercontent.com";
  
    // <----- ACCESS FROM HOME -----> //
    // const loginUrl = "http://192.168.1.76:8000/api/login";
    
      // <----- ACCESS FROM IEK -----> //
    const loginUrl = "http://172.16.0.155:8000/api/login";
  
    const LoginUser = async () => {
      const email = document.getElementById("email").value;
      const password = document.getElementById("password").value;
      localStorage.setItem("hasShownWelcomeMessage", "true");
  
      try {
        const response = await fetch(loginUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ email, password }),
        });
  
        if (response.ok) {
          setErrorOccurred(false); // Reset the error state
          setWrongCredentials(false); // Reset the wrong credentials state
          const data = await response.json();
          const token = data.access_token;
  
          localStorage.setItem("token", token);
  
          toast.success("Login successful!", {
            position: "top-right",
            style: {
              autoClose: 2000,
              hideProgressBar: false,
              closeOnClick: true,
              pauseOnHover: true,
              draggable: true,
              progress: undefined,
              background: "#fff",
              color: "#333",
              theme: "colored",
            },
          });
  
          onLogin();
          navigate("/");
        } else if (response.status === 401) {
          setWrongCredentials(true); // Set wrong credentials state
        } else {
          setErrorOccurred(true);
        }
      } catch (error) {
        console.error("Error during login:", error);
  
        if (error.message === "Failed to fetch") {
          setErrorOccurred(true); // Network error or API unreachable
        } else {
          setErrorOccurred(false); // Reset the error state for other errors (e.g., server error)
        }
      }
    };